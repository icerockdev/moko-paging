// This file automatically generated by MOKO KSwift (https://github.com/icerockdev/moko-kswift)
//
import MultiPlatformLibrary

/**
 * selector: ClassContext/dev.icerock.moko:resources/dev/icerock/moko/resources/ColorResource */
public enum ColorResourceKs {

  case single(ColorResource.Single)
  case themed(ColorResource.Themed)

  var sealed: ColorResource {
    switch self {
    case .single(let obj):
      return obj as! MultiPlatformLibrary.ColorResource
    case .themed(let obj):
      return obj as! MultiPlatformLibrary.ColorResource
    }
  }

  public init(_ obj: ColorResource) {
    if let obj = obj as? MultiPlatformLibrary.ColorResource.Single {
      self = .single(obj)
    } else if let obj = obj as? MultiPlatformLibrary.ColorResource.Themed {
      self = .themed(obj)
    } else {
      fatalError("ColorResourceKs not syncronized with ColorResource class")
    }
  }

}

/**
 * selector: ClassContext/dev.icerock.moko:resources/dev/icerock/moko/resources/desc/StringDesc.LocaleType */
public enum StringDescLocaleTypeKs {

  case system
  case custom(StringDescLocaleType.Custom)

  var sealed: StringDescLocaleType {
    switch self {
    case .system:
      return MultiPlatformLibrary.StringDescLocaleType.System() as! MultiPlatformLibrary.StringDescLocaleType
    case .custom(let obj):
      return obj as! MultiPlatformLibrary.StringDescLocaleType
    }
  }

  public init(_ obj: StringDescLocaleType) {
    if obj is MultiPlatformLibrary.StringDescLocaleType.System {
      self = .system
    } else if let obj = obj as? MultiPlatformLibrary.StringDescLocaleType.Custom {
      self = .custom(obj)
    } else {
      fatalError("StringDescLocaleTypeKs not syncronized with StringDescLocaleType class")
    }
  }

}
