// This file automatically generated by MOKO KSwift (https://github.com/icerockdev/moko-kswift)
//
import Foundation
import MultiPlatformLibrary
import UIKit

public extension MultiPlatformLibrary.DisposableHandle {
  /**
   * selector: PackageFunctionContext/dev.icerock.moko:mvvm-flow/dev.icerock.moko.mvvm.flow/Class(name=dev/icerock/moko/mvvm/flow/DisposableHandle)/plus/other:Class(name=dev/icerock/moko/mvvm/flow/DisposableHandle)
   */
  @discardableResult
  public func plus(other: DisposableHandle) -> DisposableHandle {
    return DisposableHandleKt.plus(self, other: other)
  }
}

public extension UIKit.UIView {
  /**
   * selector: PackageFunctionContext/dev.icerock.moko:mvvm-flow/dev.icerock.moko.mvvm.flow.binding/Class(name=platform/UIKit/UIView)/bindBackgroundColor/flow:Class(name=dev/icerock/moko/mvvm/flow/CStateFlow)<Class(name=kotlin/Boolean)>,trueColor:Class(name=platform/UIKit/UIColor),falseColor:Class(name=platform/UIKit/UIColor)
   */
  @discardableResult
  public func bindBackgroundColor(
    flow: CStateFlow<KotlinBoolean>,
    trueColor: UIColor,
    falseColor: UIColor
  ) -> DisposableHandle {
    return UIViewBindingsKt.bindBackgroundColor(self, flow: flow, trueColor: trueColor, falseColor: falseColor)
  }
}

public extension UIKit.UIControl {
  /**
   * selector: PackageFunctionContext/dev.icerock.moko:mvvm-flow/dev.icerock.moko.mvvm.flow.binding/Class(name=platform/UIKit/UIControl)/bindEnabled/flow:Class(name=dev/icerock/moko/mvvm/flow/CStateFlow)<Class(name=kotlin/Boolean)>
   */
  @discardableResult
  public func bindEnabled(flow: CStateFlow<KotlinBoolean>) -> DisposableHandle {
    return UIControlBindingsKt.bindEnabled(self, flow: flow)
  }
}

public extension UIKit.UIView {
  /**
   * selector: PackageFunctionContext/dev.icerock.moko:mvvm-flow/dev.icerock.moko.mvvm.flow.binding/Class(name=platform/UIKit/UIView)/bindFocus/flow:Class(name=dev/icerock/moko/mvvm/flow/CStateFlow)<Class(name=kotlin/Boolean)>
   */
  @discardableResult
  public func bindFocus(flow: CStateFlow<KotlinBoolean>) -> DisposableHandle {
    return UIViewBindingsKt.bindFocus(self, flow: flow)
  }
}

public extension UIKit.UIControl {
  /**
   * selector: PackageFunctionContext/dev.icerock.moko:mvvm-flow/dev.icerock.moko.mvvm.flow.binding/Class(name=platform/UIKit/UIControl)/bindFocusTwoWay/flow:Class(name=dev/icerock/moko/mvvm/flow/CMutableStateFlow)<Class(name=kotlin/Boolean)>
   */
  @discardableResult
  public func bindFocusTwoWay(flow: CMutableStateFlow<KotlinBoolean>) -> DisposableHandle {
    return UIControlBindingsKt.bindFocusTwoWay(self, flow: flow)
  }
}

public extension UIKit.UITextView {
  /**
   * selector: PackageFunctionContext/dev.icerock.moko:mvvm-flow/dev.icerock.moko.mvvm.flow.binding/Class(name=platform/UIKit/UITextView)/bindFocusTwoWay/flow:Class(name=dev/icerock/moko/mvvm/flow/CMutableStateFlow)<Class(name=kotlin/Boolean)>
   */
  @discardableResult
  public func bindFocusTwoWay(flow: CMutableStateFlow<KotlinBoolean>) -> DisposableHandle {
    return UITextViewBindingsKt.bindFocusTwoWay(self, flow: flow)
  }
}

public extension UIKit.UIView {
  /**
   * selector: PackageFunctionContext/dev.icerock.moko:mvvm-flow/dev.icerock.moko.mvvm.flow.binding/Class(name=platform/UIKit/UIView)/bindHidden/flow:Class(name=dev/icerock/moko/mvvm/flow/CStateFlow)<Class(name=kotlin/Boolean)>
   */
  @discardableResult
  public func bindHidden(flow: CStateFlow<KotlinBoolean>) -> DisposableHandle {
    return UIViewBindingsKt.bindHidden(self, flow: flow)
  }
}

public extension UIKit.UIButton {
  /**
   * selector: PackageFunctionContext/dev.icerock.moko:mvvm-flow/dev.icerock.moko.mvvm.flow.binding/Class(name=platform/UIKit/UIButton)/bindImage/flow:Class(name=dev/icerock/moko/mvvm/flow/CStateFlow)<Class(name=kotlin/Boolean)>,trueImage:Class(name=platform/UIKit/UIImage),falseImage:Class(name=platform/UIKit/UIImage)
   */
  @discardableResult
  public func bindImage(
    flow: CStateFlow<KotlinBoolean>,
    trueImage: UIImage,
    falseImage: UIImage
  ) -> DisposableHandle {
    return UIButtonBindingsKt.bindImage(self, flow: flow, trueImage: trueImage, falseImage: falseImage)
  }
}

public extension UIKit.UISwitch {
  /**
   * selector: PackageFunctionContext/dev.icerock.moko:mvvm-flow/dev.icerock.moko.mvvm.flow.binding/Class(name=platform/UIKit/UISwitch)/bindSwitchOn/flow:Class(name=dev/icerock/moko/mvvm/flow/CStateFlow)<Class(name=kotlin/Boolean)>
   */
  @discardableResult
  public func bindSwitchOn(flow: CStateFlow<KotlinBoolean>) -> DisposableHandle {
    return UISwitchBindingsKt.bindSwitchOn(self, flow: flow)
  }
}

public extension UIKit.UISwitch {
  /**
   * selector: PackageFunctionContext/dev.icerock.moko:mvvm-flow/dev.icerock.moko.mvvm.flow.binding/Class(name=platform/UIKit/UISwitch)/bindSwitchOnTwoWay/flow:Class(name=dev/icerock/moko/mvvm/flow/CMutableStateFlow)<Class(name=kotlin/Boolean)>
   */
  @discardableResult
  public func bindSwitchOnTwoWay(flow: CMutableStateFlow<KotlinBoolean>) -> DisposableHandle {
    return UISwitchBindingsKt.bindSwitchOnTwoWay(self, flow: flow)
  }
}

public extension UIKit.UILabel {
  /**
   * selector: PackageFunctionContext/dev.icerock.moko:mvvm-flow/dev.icerock.moko.mvvm.flow.binding/Class(name=platform/UIKit/UILabel)/bindText/flow:Class(name=dev/icerock/moko/mvvm/flow/CStateFlow)<TypeParameter(id=0)>
   */
  @discardableResult
  public func bindText<T : NSString>(flow: CStateFlow<T>) -> DisposableHandle {
    return UILabelBindingsKt.bindText(self, flow: flow as! MultiPlatformLibrary.CStateFlow<Foundation.NSString>)
  }
}

public extension UIKit.UITextField {
  /**
   * selector: PackageFunctionContext/dev.icerock.moko:mvvm-flow/dev.icerock.moko.mvvm.flow.binding/Class(name=platform/UIKit/UITextField)/bindText/flow:Class(name=dev/icerock/moko/mvvm/flow/CStateFlow)<TypeParameter(id=0)>
   */
  @discardableResult
  public func bindText<T : NSString>(flow: CStateFlow<T>) -> DisposableHandle {
    return UITextFieldBindingsKt.bindText(self, flow: flow as! MultiPlatformLibrary.CStateFlow<Foundation.NSString>)
  }
}

public extension UIKit.UITextView {
  /**
   * selector: PackageFunctionContext/dev.icerock.moko:mvvm-flow/dev.icerock.moko.mvvm.flow.binding/Class(name=platform/UIKit/UITextView)/bindText/flow:Class(name=dev/icerock/moko/mvvm/flow/CStateFlow)<TypeParameter(id=0)>
   */
  @discardableResult
  public func bindText<T : NSString>(flow: CStateFlow<T>) -> DisposableHandle {
    return UITextViewBindingsKt.bindText(self, flow: flow as! MultiPlatformLibrary.CStateFlow<Foundation.NSString>)
  }
}

public extension UIKit.UITextField {
  /**
   * selector: PackageFunctionContext/dev.icerock.moko:mvvm-flow/dev.icerock.moko.mvvm.flow.binding/Class(name=platform/UIKit/UITextField)/bindTextTwoWay/flow:Class(name=dev/icerock/moko/mvvm/flow/CMutableStateFlow)<Class(name=kotlin/String)>
   */
  @discardableResult
  public func bindTextTwoWay(flow: CMutableStateFlow<NSString>) -> DisposableHandle {
    return UITextFieldBindingsKt.bindTextTwoWay(self, flow: flow)
  }
}

public extension UIKit.UITextView {
  /**
   * selector: PackageFunctionContext/dev.icerock.moko:mvvm-flow/dev.icerock.moko.mvvm.flow.binding/Class(name=platform/UIKit/UITextView)/bindTextTwoWay/flow:Class(name=dev/icerock/moko/mvvm/flow/CMutableStateFlow)<Class(name=kotlin/String)>
   */
  @discardableResult
  public func bindTextTwoWay(flow: CMutableStateFlow<NSString>) -> DisposableHandle {
    return UITextViewBindingsKt.bindTextTwoWay(self, flow: flow)
  }
}

public extension UIKit.UIButton {
  /**
   * selector: PackageFunctionContext/dev.icerock.moko:mvvm-flow/dev.icerock.moko.mvvm.flow.binding/Class(name=platform/UIKit/UIButton)/bindTitle/flow:Class(name=dev/icerock/moko/mvvm/flow/CStateFlow)<TypeParameter(id=0)>
   */
  @discardableResult
  public func bindTitle<T : NSString>(flow: CStateFlow<T>) -> DisposableHandle {
    return UIButtonBindingsKt.bindTitle(self, flow: flow as! MultiPlatformLibrary.CStateFlow<Foundation.NSString>)
  }
}
