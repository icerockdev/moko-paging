// This file automatically generated by MOKO KSwift (https://github.com/icerockdev/moko-kswift)
//
import MultiPlatformLibrary

/**
 * selector: ClassContext/dev.icerock.moko:paging-state/dev/icerock/moko/paging/state/ResourceState */
public enum ResourceStateKs<T : AnyObject, E : AnyObject> {

  case empty
  case loading
  case data(ResourceStateData<T>)
  case error(ResourceStateError<E>)

  var sealed: ResourceState {
    switch self {
    case .empty:
      return MultiPlatformLibrary.ResourceStateEmpty() as! MultiPlatformLibrary.ResourceState
    case .loading:
      return MultiPlatformLibrary.ResourceStateLoading() as! MultiPlatformLibrary.ResourceState
    case .data(let obj):
      return obj as! MultiPlatformLibrary.ResourceState
    case .error(let obj):
      return obj as! MultiPlatformLibrary.ResourceState
    }
  }

  public init(_ obj: ResourceState) {
    if obj is MultiPlatformLibrary.ResourceStateEmpty {
      self = .empty
    } else if obj is MultiPlatformLibrary.ResourceStateLoading {
      self = .loading
    } else if let obj = obj as? MultiPlatformLibrary.ResourceStateData<T> {
      self = .data(obj)
    } else if let obj = obj as? MultiPlatformLibrary.ResourceStateError<E> {
      self = .error(obj)
    } else {
      fatalError("ResourceStateKs not syncronized with ResourceState class")
    }
  }

}
